#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage[usenames,dvipsnames]{pstricks}
\usepackage{epsfig}
\usepackage{pst-grad} % For gradients
\usepackage{pst-plot} % For axes
\usepackage{tikz}
\date {}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language brazilian
\language_package none
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Trabalho Prático 1: The city is on fire!
\end_layout

\begin_layout Author
Gabriel Henrique Souto Pires {gabrielpires@ufmg.br}
\end_layout

\begin_layout Section
Introdução
\end_layout

\begin_layout Standard
Neste problema são dados um conjunto de vértices que representam os quarteirões
 de uma cidade e as arestas que representam as ruas que ligam os quarteirões.
 Você é um bombeiro preguiçoso e gostaria de trabalhar o mínimo possível,
 então ao sair de um corpo de bombeiros para outro seria ideal evitar passar
 pelos caminhos onde a probabilidade 
\begin_inset Formula $P(u,v)$
\end_inset

 de ter um incêndio é alta entre os quarterões 
\emph on
u
\emph default
 e 
\emph on
v
\emph default
, sendo que 
\begin_inset Formula $P(u,v)=P(v,u)$
\end_inset

 e todas as ruas são de mão dupla.
 Durante o trajeto, também é necessário ficar a uma distância de no máximo
 
\emph on
k
\emph default
 quarteirões de algum corpo de bombeiros, dessa forma outros bombeiros podem
 vir apagar o incêndio no seu lugar.
\end_layout

\begin_layout Standard
A tarefa neste TP é descobrir o caminho que respeita as restrições descritas
 acima, ou seja, um caminho que passe por quarteirões que tenham a menor
 probabilidade de incêndio possível tal que a probabilidade total de incêndio
 entre o quarteirão de saída e o de chegada seja mínima e o caminho passe
 sempre por vértices que estejam a uma distância máxima 
\emph on
k
\emph default
 de algum corpo de bombeiros.
\end_layout

\begin_layout Section
Solução do Problema
\end_layout

\begin_layout Standard
A probabilidade 
\begin_inset Formula $P(u,v)$
\end_inset

 de ter um incêndio em dado trecho pode ser interpretada como o peso das
 arestas entre os vértices do grafo que são os quarteirões da cidade.
 Desta forma, o caminho mais curto é aquele em que o peso total das arestas
 é mínimo, ou seja, a probabilidade de incêndio é menor.
 Para resolver o problema, foi criado uma lista
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Os TADs Lista, Fila e Heap utilizados neste TP foram feitos usando como
 referência o código desenvolvido pelos professores Thiago Noronha e William
 Schwartz durante a disciplina de AEDS 2 no semestre passado.
\end_layout

\end_inset

 de adjacência para representar o grafo (os vértices e as arestas que ligam
 os vértices adjacentes à eles).
 A lista de adjacência é basicamente um vetor com uma posição para cada
 vértice, cada posição do vetor contém uma lista encadeada onde são inseridos
 os vértices adjacentes ao vértice referente à posição atual do vetor.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename lista_adjacencia.jpg
	scale 55

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale=0.1] 
\backslash
tikzstyle{every node}+=[inner sep=0pt] 
\backslash
draw [black] (11.9,-25.9) circle (3); 
\backslash
draw (11.9,-25.9) node {$1$}; 
\backslash
draw [black] (11.9,-41.3) circle (3); 
\backslash
draw (11.9,-41.3) node {$2$}; 
\backslash
draw [black] (11.9,-9.3) circle (3); 
\backslash
draw (11.9,-9.3) node {$Saida
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }0
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }$}; 
\backslash
draw [black] (34,-25.9) circle (3); 
\backslash
draw (34,-25.9) node {$4$}; 
\backslash
draw [black] (34,-41.3) circle (3); 
\backslash
draw (34,-41.3) node {$5$}; 
\backslash
draw [black] (34,-9.3) circle (3); 
\backslash
draw (34,-9.3) node {$3$}; 
\backslash
draw [black] (54.8,-9.3) circle (3); 
\backslash
draw (54.8,-9.3) node {$
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }6
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }Bombeiros
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }$}; 
\backslash
draw [black] (54.8,-25.9) circle (3); 
\backslash
draw (54.8,-25.9) node {$7$}; 
\backslash
draw [black] (54.8,-41.3) circle (3); 
\backslash
draw (54.8,-41.3) node {$
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }8
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }
\backslash
mbox{ }Chegada$}; 
\backslash
draw [black] (11.9,-28.9) -- (11.9,-38.3); 
\backslash
fill [black] (11.9,-38.3) -- (12.4,-37.5) -- (11.4,-37.5); 
\backslash
draw (11.4,-33.6) node [left] {$0.30$}; 
\backslash
draw [black] (11.9,-12.3) -- (11.9,-22.9); 
\backslash
fill [black] (11.9,-22.9) -- (12.4,-22.1) -- (11.4,-22.1); 
\backslash
draw (11.4,-17.6) node [left] {$0.30$}; 
\backslash
draw [black] (11.9,-22.9) -- (11.9,-12.3); 
\backslash
fill [black] (11.9,-12.3) -- (11.4,-13.1) -- (12.4,-13.1); 
\backslash
draw [black] (11.9,-38.3) -- (11.9,-28.9); 
\backslash
fill [black] (11.9,-28.9) -- (11.4,-29.7) -- (12.4,-29.7); 
\backslash
draw [black] (31,-41.3) -- (14.9,-41.3); 
\backslash
fill [black] (14.9,-41.3) -- (15.7,-41.8) -- (15.7,-40.8); 
\backslash
draw (22.95,-41.8) node [below] {$0.10$}; 
\backslash
draw [black] (14.9,-41.3) -- (31,-41.3); 
\backslash
fill [black] (31,-41.3) -- (30.2,-40.8) -- (30.2,-41.8); 
\backslash
draw [black] (34,-38.3) -- (34,-28.9); 
\backslash
fill [black] (34,-28.9) -- (33.5,-29.7) -- (34.5,-29.7); 
\backslash
draw (34.5,-33.6) node [right] {$0.15$}; 
\backslash
draw [black] (34,-28.9) -- (34,-38.3); 
\backslash
fill [black] (34,-38.3) -- (34.5,-37.5) -- (33.5,-37.5); 
\backslash
draw [black] (31,-25.9) -- (14.9,-25.9); 
\backslash
fill [black] (14.9,-25.9) -- (15.7,-26.4) -- (15.7,-25.4); 
\backslash
draw (22.95,-26.4) node [below] {$0.40$}; 
\backslash
draw [black] (14.9,-25.9) -- (31,-25.9); 
\backslash
fill [black] (31,-25.9) -- (30.2,-25.4) -- (30.2,-26.4); 
\backslash
draw [black] (34,-22.9) -- (34,-12.3); 
\backslash
fill [black] (34,-12.3) -- (33.5,-13.1) -- (34.5,-13.1); 
\backslash
draw (34.5,-17.6) node [right] {$0.20$}; 
\backslash
draw [black] (34,-12.3) -- (34,-22.9); 
\backslash
fill [black] (34,-22.9) -- (34.5,-22.1) -- (33.5,-22.1); 
\backslash
draw [black] (31,-9.3) -- (14.9,-9.3); 
\backslash
fill [black] (14.9,-9.3) -- (15.7,-9.8) -- (15.7,-8.8); 
\backslash
draw (22.95,-8.8) node [above] {$0.20$}; 
\backslash
draw [black] (14.9,-9.3) -- (31,-9.3); 
\backslash
fill [black] (31,-9.3) -- (30.2,-8.8) -- (30.2,-9.8); 
\backslash
draw [black] (54.8,-38.3) -- (54.8,-28.9); 
\backslash
fill [black] (54.8,-28.9) -- (54.3,-29.7) -- (55.3,-29.7); 
\backslash
draw (55.3,-33.6) node [right] {$0.10$}; 
\backslash
draw [black] (54.8,-28.9) -- (54.8,-38.3); 
\backslash
fill [black] (54.8,-38.3) -- (55.3,-37.5) -- (54.3,-37.5); 
\backslash
draw [black] (51.8,-41.3) -- (37,-41.3); 
\backslash
fill [black] (37,-41.3) -- (37.8,-41.8) -- (37.8,-40.8); 
\backslash
draw (44.4,-41.8) node [below] {$0.10$}; 
\backslash
draw [black] (37,-41.3) -- (51.8,-41.3); 
\backslash
fill [black] (51.8,-41.3) -- (51,-40.8) -- (51,-41.8); 
\backslash
draw [black] (54.8,-22.9) -- (54.8,-12.3); 
\backslash
fill [black] (54.8,-12.3) -- (54.3,-13.1) -- (55.3,-13.1); 
\backslash
draw (55.3,-17.6) node [right] {$0.30$}; 
\backslash
draw [black] (51.8,-9.3) -- (37,-9.3); 
\backslash
fill [black] (37,-9.3) -- (37.8,-9.8) -- (37.8,-8.8); 
\backslash
draw (44.4,-8.8) node [above] {$0.40$}; 
\backslash
draw [black] (37,-9.3) -- (51.8,-9.3); 
\backslash
fill [black] (51.8,-9.3) -- (51,-8.8) -- (51,-9.8); 
\backslash
draw [black] (51.8,-25.9) -- (37,-25.9); 
\backslash
fill [black] (37,-25.9) -- (37.8,-26.4) -- (37.8,-25.4); 
\backslash
draw (44.4,-26.4) node [below] {$0.10$}; 
\backslash
draw [black] (37,-25.9) -- (51.8,-25.9); 
\backslash
fill [black] (51.8,-25.9) -- (51,-25.4) -- (51,-26.4); 
\backslash
draw [black] (54.8,-12.3) -- (54.8,-22.9); 
\backslash
fill [black] (54.8,-22.9) -- (55.3,-22.1) -- (54.3,-22.1); 
\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align left
\begin_inset Caption Standard

\begin_layout Plain Layout
Representação do grafo (direita) em forma de lista de adjacências (esquerda)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Uma vez que os vértices que estão a uma distância 
\emph on
k
\emph default
 maior que a máxima permitida não podem ser percorridos, o menor caminho
 nunca passará por eles, então esses vértices devem ser desconsiderados
 na hora de se procurar a solução no grafo.
 Isso foi feito com uma 
\emph on
busca em largura
\emph default
 onde para cada vértice com corpo de bombeiros uma busca é feita e apenas
 os vértices a uma distância máxima 
\emph on
k
\emph default
 do vértice de origem são marcados como válidos em um vetor.
 Dessa forma, ao se rodar o algoritmo que acha o caminho mínimo, os vértices
 inválidos não são nem testados, o que torna o algoritmo mais rápido e evita
 que caminhos mínimos que passam por vértices inválidos sejam considerados
 no final da execução.
 Como visto no pseudo código abaixo, uma fila é utilizada
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=C,basicstyle={\small},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

while(!filaVazia){
\end_layout

\begin_layout Plain Layout

	if(distPai < k){
\end_layout

\begin_layout Plain Layout

		for(Percorre a lista(vertice[i]) até o final da lista){
\end_layout

\begin_layout Plain Layout

			enfileira(nodoAtual, distPai+1);
\end_layout

\begin_layout Plain Layout

			vertsValidos[nodoAtual] = 1;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	desenfileira(fila);
\end_layout

\begin_layout Plain Layout

	i = frenteFila(fila);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Pseudo código do loop principal da busca em largura
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Com os vértices válidos marcados no vetor, o grafo foi submetido ao algoritmo
 de 
\emph on
Dijkstra
\emph default
 que acha o menor caminho entre dois vértices em um grafo onde as arestas
 não tem peso negativo e como as arestas no problema em questão não terão
 valor negativo uma vez que a probabilidade de incêndio varia de 0 a 1,
 isso não será um problema.
\end_layout

\begin_layout Standard
O 
\emph on
Dijsktra
\emph default
 recebe como parâmetro o grafo em forma de lista de adjacência, o vértice
 de origem, o número de quarteirões, o vetor de vértices válidos gerado
 pela busca em largura e o número do vértice de chegada.
 Na função os vértices válidos são percorridos a fim de se encontrar o melhor
 caminho entre o vértice de origem e o de chegada.
 Nessa função, cada vez que se chega até um vértice todas as suas arestas
 são inseridas em um 
\emph on
Heap
\emph default
 na forma de 
\begin_inset Formula $P_{N}$
\end_inset

, ou melhor, 
\begin_inset Formula $P(s,u)*(1-P(u,v))$
\end_inset

, sendo que 
\emph on
s 
\emph default
é o vértice de saída, 
\emph on
u
\emph default
 é o vértice atual e 
\emph on
v
\emph default
 é o próximo vértice a ser percorrido.
 Esta probabilidade representa a chance de não haver incêndio no caminho
 até a origem.
 Desta forma é possível saber qual aresta percorrer em 
\emph on
O(1)
\emph default
 já que basta apenas retirar a maior aresta do Heap (Max-Heap) e seguir
 a partir dela repetindo o processo até que se ache a solução.
 Cada vez que uma aresta é inserida, o vértice em que ela chega recebe como
 antecessor o vértice de saída da aresta.
 Essa operação é útil na hora de se identificar o caminho que foi feito
 pelo algoritmo, já que basta fazer o caminho de volta nesse vetor de antecessor
es para saber quais vértices foram percorridos.
\end_layout

\begin_layout Standard
Durante a execução do algoritmo, a maior probabilidade de não haver incêndio
 de um vértice até o vértice de saída é armazenada na posição de um vetor
 de probabilidades referente a cada vértice.
 Ao final da execução, é exibida na tela 
\begin_inset Formula $1-prob[c]$
\end_inset

, que representa a probabilidade de incêndio no melhor caminho possível
 até o vértice de chegada, assim como o caminho, obtido através do vetor
 de antecessores.
\end_layout

\begin_layout Standard
Caso existam dois caminhos com a mesma probabilidade final, o caminho escolhido
 deve ser aquele que respeita a ordem lexicográfica, ou seja, se o caminho
 pode passar tanto pelos vértices 
\begin_inset Formula $1-3-4$
\end_inset

 quanto pelos vértices 
\begin_inset Formula $1-2-4$
\end_inset

, o caminho escolhido será 
\begin_inset Formula $1-2-4$
\end_inset

 já que 2 é menor que 3.
 Esse problema foi solucionado ao se inserir os vértices na fila por ordem
 de número de vértice, ou seja, os vértices com menor número estarão sempre
 na frente da fila e serão testados no Dijkstra primeiro, dando preferência
 para os caminhos de menor ordem lexicográfica.
\end_layout

\begin_layout Standard
Se não for possível respeitas as restrições impostas na especificação ao
 invés de imprimir o caminho, é exibido na tela o número -1.
\end_layout

\begin_layout Section
Análise Teórica do Custo Assintótico
\end_layout

\begin_layout Standard
Nesta seção serão apresentadas as análises de custo assintótico de tempo
 e de espaço.
\end_layout

\begin_layout Subsection
Análise Teórica do Custo Assintótico de Tempo
\end_layout

\begin_layout Standard
A análise de custo assintótico de tempo pode ser feita ao se analisar os
 2 algoritmos principais usados:
\end_layout

\begin_layout Subsection
Análise Teórica do Custo Assintótico de Espaço
\end_layout

\begin_layout Section
Análise Experimental do Custo Assintótico
\end_layout

\begin_layout Section
Conclusão
\end_layout

\begin_layout Standard
O problema proposto neste trabalho foi o do Bombeiro Preguiçoso que foi
 resolvido transformando a entrada do problema em um grafo e submetendo-o
 aos algoritmos de Busca em Largura e Dijkstra.
 Foram utilizados também os TADs Lista, Fila e Heap que foram desenvolvidos
 tomando como referência os códigos cedidos pelos professores Thiago Noronha
 e William Schwartz.
\end_layout

\end_body
\end_document
