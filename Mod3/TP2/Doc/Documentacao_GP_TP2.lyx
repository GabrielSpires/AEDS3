#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage[usenames,dvipsnames]{pstricks}
\usepackage{epsfig}
\usepackage{pst-grad} % For gradients
\usepackage{pst-plot} % For axes
\usepackage{tikz}
\date {}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language brazilian
\language_package none
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 3cm
\rightmargin 2.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
Trabalho Prático 2:
\series default
 The Force Awakens
\end_layout

\begin_layout Author
Gabriel Henrique Souto Pires {gabrielpires@ufmg.br}
\end_layout

\begin_layout Section
Introdução
\end_layout

\begin_layout Standard
Após 30 anos de paz na galáxia, o lado negro da força planeja seu retorno
 e você como o novo Lord Sith planeja reconquistar a galáxia, vingar a morte
 de seu mestre Darth Vader e terminar o que ele começou.
 O problema proposto consiste em conquistar um número 
\emph on
k
\emph default
 de planetas usando a sua nova super arma galática, a Estrela da Morte III.
 Com um mapa da galáxia em mãos é possível criar uma rota que começa no
 ponto atual da Estrela da Morte III, passa por todos os planetas que podem
 ser conquistados nas proximidades contando com o valor da distância entre
 eles e terminando em um ponto de chegada.
 Como a nova estação do império ainda esta em fase de testes, é necessário
 conquistar os planetas usando o minimo de recursos possível, ou seja, se
 deslocando o mínimo possível entre cada planeta.
 Usando a rota traçada entre os planetas a serem conquistados, 
\emph on
k 
\emph default
planetas devem ser escolhidos para se conquistar de modo que a sub-distância
 mínima do percurso seja minimizada.
\end_layout

\begin_layout Section
Solução do Problema
\end_layout

\begin_layout Standard
O problema proposto foi resolvido utilizando três paradigmas de programação,
 sendo eles força bruta, programação dinâmica e um algoritmo guloso, que
 são explicados abaixo.
\end_layout

\begin_layout Subsection
Algoritmo Guloso
\end_layout

\begin_layout Standard
Na solução gulosa foi utilizado um vetor para guardar as distâncias a serem
 percorridas.
 Nesse vetor cada posição representa um estágio do caminho a ser percorrido
 pela nave, sendo que a posição 
\begin_inset Formula $0$
\end_inset

 é referente ao início do caminho e a posição 
\begin_inset Formula $n+2$
\end_inset

 representa o final do caminho.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename entrada.pdf
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Formatação da entrada
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Inicialmente a menor sub-distância escolhida é a distância do início ao
 planeta 2, ou seja, a soma das posições 1 e 2 do vetor.
 O índice 
\emph on
k 
\emph default
da primeira posição a ser somada também é guardado para que depois seja
 possível saber onde no vetor alterar os valores e a partir de qual posição
 deslocar as posições das demais distâncias.
 Depois de escolher a menor sub-distância inicial, o vetor é percorrido
 à procura de uma soma que seja menor do que a escolhida anteriormente,
 isso indicaria que a sub-distância anterior não é a melhor no momento e
 então ela é substituída pela nova encontrada.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename guloso_vetor.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Teste de sub-distâncias
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Depois de percorrer o vetor de distâncias e somar as menores sub-distâncias
 
\emph on
n-k 
\emph default
vezes, o vetor final é obtido.
 O maior valor contido nesse vetor representa a maior sub-distância possível
 que é a resposta para o problema.
 Mas o algoritmo guloso não da a solução ótima em todos os testes.
 Como a melhor decisão disponível no momento é sempre tomada, em um caso
 onde conquistar um planeta seja a melhor estratégia ao invés de pulá-lo,
 o algoritmo guloso pode vir a mostrar uma solução não ótima, já que uma
 vez tomada uma decisão por ele não é possível voltar atrás.
 Assim como mostrado na Figura 3, no passo onde o guloso falha a melhor
 estratégia seria pular a posição de valor 4 e somar 3 com 11, mas o que
 ele faz na verdade é somar 4 com 3, o que parece ser a melhor solução no
 momento, e depois soma 11 com 7, dando a resposta 18 quando a solução ótima
 é na verdade 15.
 Então se pode perceber que quando uma soluçao aparentemente ótima no momento
 aparece no vetor antes da solução ótima de fato, o algoritmo guloso falha,
 já que uma de suas características é nunca ter que reconsiderar suas escolhas
 anteriores por supor que as soluções ótimas no momento são de fato parte
 da solução final.
 O problema proposto também não é ideal para ser resolvido com um algortimo
 guloso, uma vez que a solução ótima para o problema nem sempre contém as
 soluções ótimas para os sub-problemas, assim como mostrado na Figura 3.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename guloso_falha.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Caso de teste em que o algoritmo guloso falha
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Força Bruta
\end_layout

\begin_layout Standard
Na força bruta, todas as possibilidades de escolha foram levadas em consideração
, assim ao se testar todos os casos, algum deles deve ser a solução ótima
 e a resposta será encontrada.
 Como na entrada são dados o número de planetas e a quantidade de planetas
 a serem escolhidos, os casos podem ser gerados ao se fazer a combinação
 utilizando esses números.
 Usando como referência a entrada da Figura 1, a combinação usada pode ser
 representada pela fórmula e pela tabela abaixo:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula 
\[
\binom{n}{k}=\frac{n!}{(n-k)!*k!}
\]

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Combinação
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Maior sub-distância
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1,2}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{1,3}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
{2,3}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Cada combinação gerada é jogada em um vetor que representa as posições que
 devem ser visitadas no vetor de distâncias.
 Para cada combinação gerada, um teste é feito para achar a maior sub-distância
 possível fazendo a escolha gerada e o valor encontrado é jogado em uma
 váriável.
 Depois que todas as combinações são geradas e testadas, a menor maior sub-distâ
ncia de todos os testes é exibida como resultado.
\end_layout

\begin_layout Subsection
Programação Dinâmica
\end_layout

\begin_layout Section
Análise Teórica do Custo Assintótico
\end_layout

\begin_layout Standard
A complexidade assintótica do programa será discutida na subseção abaixo.
\end_layout

\begin_layout Subsection
Análise Teórica do Custo Assintótico de Tempo
\end_layout

\begin_layout Subsubsection
Algoritmo Guloso
\end_layout

\begin_layout Standard
No algoritmo guloso existe um loop que controla quantos planetas deverão
 ser ignorados no trajeto que roda 
\emph on
n-k 
\emph default
vezes já que esse é o número de distâncias que deverão ser somadas, então
 
\begin_inset Formula $O(n-k)$
\end_inset

.
 Dentro desse loop um outro laço vai de 1 até 
\emph on
numPlanetas-1
\emph default
, e como o vetor de distâncias tem 
\emph on
n+2
\emph default
 posições pode-se dizer que o laço roda n vezes, então 
\begin_inset Formula $O(n)$
\end_inset

.
 Dentro do mesmo loop existe um 
\emph on
for 
\emph default
que roda da posição a ser somada até o fim do vetor, fazendo o deslocamento
 necessário.
 No pior caso esse loop rodará o vetor todo que tem 
\begin_inset Formula $n+2$
\end_inset

 posições, então 
\begin_inset Formula $O(n)$
\end_inset

.
 Fora de todos os loops existe um último 
\emph on
for 
\emph default
que roda o vetor todo à procura da maior sub-distância contida nele que
 também roda em 
\begin_inset Formula $O(n)$
\end_inset

.
\end_layout

\begin_layout Standard
Desta forma podemos concluir que o algoritmo guloso roda em 
\begin_inset Formula $O(n+k)*(O(n)+O(n))+O(n)=O(2n\text{²}+2nk+n)=O(n\text{²})$
\end_inset


\end_layout

\begin_layout Subsubsection
Força Bruta
\end_layout

\begin_layout Standard
O algoritmo de força bruta gera todas as combinações possíveis de escolhas
 de planetas, dessa forma a complexidade dessa implementação tende a ser
 
\begin_inset Formula $O(n!)$
\end_inset

 já que uma combinação 
\begin_inset Formula $\binom{n}{k}$
\end_inset

 gera 
\begin_inset Formula $\frac{n!}{(n-k)!*k!}$
\end_inset

 vetores diferentes que tem de ser verificados.
\end_layout

\begin_layout Subsubsection
Programação Dinâmica
\end_layout

\begin_layout Subsection
Análise Teórica do Custo Assintótico de Espaço
\end_layout

\begin_layout Subsubsection
Força Bruta
\end_layout

\begin_layout Standard
O algoritmo de força bruta utiliza um vetor que guarda as combinações com
 
\emph on
k 
\emph default
posições, um vetor de índices com 
\emph on
n 
\emph default
posições que serve como referencia para a combinação, um vetor que guarda
 as posições a visitar ou não com 
\emph on
n 
\emph default
posições e um vetor auxiliar também com 
\emph on
n 
\emph default
posições.
 Então a complexidade de espaço do algoritmo força bruta é de 
\begin_inset Formula $O(k+n+n+n)=O(3n+k)=O(n+k)$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Programação Dinâmica
\end_layout

\begin_layout Subsubsection
Algoritmo Guloso
\end_layout

\begin_layout Standard
O único recurso relevante que o algoritmo guloso utiliza é um vetor de inteiros
 com 
\emph on
n+2
\emph default
 posições que guarda as distâncias entre os planetas, então o custo assintótico
 de espaço pode ser considerado como 
\begin_inset Formula $O(n)$
\end_inset

.
\end_layout

\begin_layout Section
Análise Experimental do Custo Assintótico
\end_layout

\begin_layout Standard
Para fazer a análise experimental do programa, foi criado um outro programa
 que gera arquivos de entrada compatíveis de tamanhos variados de forma
 que a diferença do tempo de execução com entradas diferentes possa ser
 medido.
 Para não levar em consideração o tempo que se leva para digitar a entrada
 no tempo de execução do programa, a entrada foi lida diretamente dos arquivos.
 Para medir o tempo de execução do programa foi usada a biblioteca 
\emph on
time.h
\emph default
.
 Ao se criar uma variável do tipo 
\emph on
clock_t
\emph default
 e atribuindo à ela o valor que a função 
\emph on
clock()
\emph default
 retorna, o número de clocks necessários para executar o código pode ser
 obtido e exibido ao se transformar esse valor em um float e dividi-lo pela
 constante 
\emph on
CLOCKS_PER_SEC
\emph default
.
\end_layout

\begin_layout Standard
Os testes foram realizados em uma máquina virtual rodando Xubuntu 15.10.
 O computador utilizado tem um processador AMD Phenom II X4 965 3.40GHz e
 8GB de memória, porém, a máquina virtual utiliza apenas um núcleo do processado
r e 2GB de RAM.
\end_layout

\begin_layout Subsection
Algoritmo Guloso
\end_layout

\begin_layout Standard
No teste do algoritmo guloso foram criados arquivos de entrada variando
 tanto o total de planetas quanto o número de planetas a se conquistar.
 O total de planetas em uma entrada variou de 1000 a 5000 com um intervalo
 de 100 planetas entre cada ponto e na outra entrada o número de planetas
 foi mantido constante em 5000 e o número de planetas a se conquistar variou
 de 200 a 5000.
 Pode-se notar que quanto mais planetas devem ser visitados, mais rápido
 é o algoritmo guloso, já que serão feitas menos operações no vetor como
 somar as distâncias e deslcar suas posições.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename guloso.pdf
	scale 65

\end_inset


\begin_inset Graphics
	filename guloso_k.pdf
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Gráfico da Análise assintótica de tempo do algoritmo guloso
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Força Bruta
\end_layout

\begin_layout Standard
Para testar o tempo de execução do algoritmo força bruta, foi gerado um
 arquivo de entrada em que o número de planetas total varia de 0 a 25 com
 a quantidade a se conquistar fixada em 2, e outro onde o número de planetas
 a se conquistar varia de 2 a 7 e o número de planetas total fica fixo em
 40.
 Os gráficos abaixo demonstram o comportamento fatorial do algoritmo, por
 esse motivo não foi possível testar com um número maior de planetas a se
 conquistar (gráfico da direita) já que o algoritmo não é muito eficiente
 e demora muito a rodar a medida que mais combinações tem que ser feitas.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename forcabruta.pdf
	scale 65

\end_inset


\begin_inset Graphics
	filename forcabruta_k.pdf
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Gráfico da Análise assintótica de tempo do algoritmo força bruta
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Programação Dinâmica
\end_layout

\begin_layout Section
Conclusão
\end_layout

\begin_layout Standard
Neste trabalho foi resolvido o problema de otimização da sub-distância máxima
 em uma rota de planetas a serem conquistados.
 O problema proposto foi resolvido usando diferentes paradigmas de programação
 que mostraram se comportar de maneiras bem diferentes uns dos outros, chegando
 até a não mostrar a solução ótima sempre como no caso do algoritmo guloso.
 Isso nos mostra que ao se resolver um problema é essencial saber qual paradigma
 usar, uma vez que nem todos os paradigmas servem para resolver todos os
 tipos de problemas.
\end_layout

\end_body
\end_document
